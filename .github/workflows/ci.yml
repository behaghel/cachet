name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  GO_VERSION: "1.22"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: |
          cd services/verifier && go mod download
          cd ../registry && go mod download  
          cd ../receipts-log && go mod download
          cd ../common && go mod download

      - name: Run tests with coverage
        run: |
          mkdir -p coverage
          cd services/verifier && go test -v -coverprofile=../../coverage/verifier.out -covermode=atomic ./...
          cd ../registry && go test -v -coverprofile=../../coverage/registry.out -covermode=atomic ./...
          cd ../receipts-log && go test -v -coverprofile=../../coverage/receipts.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/verifier.out,./coverage/registry.out,./coverage/receipts.out
          flags: unittests
          name: cachet-coverage
          fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: services/verifier

      - name: golangci-lint registry
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: services/registry

      - name: golangci-lint receipts-log
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: services/receipts-log

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
          
      - name: Run Gosec Security Scanner
        uses: securecodewarrior/gosec@master
        with:
          args: './services/...'

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build verifier image
        uses: docker/build-push-action@v5
        with:
          context: ./services/verifier
          push: false
          tags: cachet/verifier:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build registry image
        uses: docker/build-push-action@v5
        with:
          context: ./services/registry
          push: false
          tags: cachet/registry:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build receipts-log image
        uses: docker/build-push-action@v5
        with:
          context: ./services/receipts-log
          push: false
          tags: cachet/receipts-log:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start services
        run: docker compose -f infra/docker-compose.yaml up -d --build

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8081/healthz; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:8082/healthz; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:8083/healthz; do sleep 2; done'

      - name: Run integration tests
        run: |
          # Test verifier endpoints
          curl -f http://localhost:8081/packs
          curl -f -X POST http://localhost:8081/presentations/verify \
            -H "Content-Type: application/json" \
            -d '{"policyId":"test","bundle":{}}'

          # Test registry endpoints  
          curl -f http://localhost:8082/policy/manifest

      - name: Stop services
        run: docker compose -f infra/docker-compose.yaml down
