name: CI/CD Pipeline

on:
  push:
    branches: ["*"]
  pull_request:
    branches: [main]

jobs:
  # Backend services using devenv (lightweight)
  backend:
    name: Backend (Go Services)
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: devenv shell bash -- -e {0}

    steps:
      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v26
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
            max-jobs = auto
            cores = 2

      - name: Setup Cachix
        uses: cachix/cachix-action@v14
        with:
          name: devenv

      - name: Install devenv
        shell: bash
        run: nix profile install nixpkgs#devenv

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Run backend CI pipeline
        run: |
          ci:deps
          ci:test
          ci:lint
          ci:security

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/verifier.out,./coverage/registry.out,./coverage/receipts.out
          flags: backend
          name: cachet-backend-coverage
          fail_ci_if_error: false

  # Android app using standard Android Actions (efficient)
  android:
    name: Android App
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('mobile/**/*.gradle*', 'mobile/**/gradle-wrapper.properties') }}

      - name: Run Android tests
        working-directory: mobile
        run: ./gradlew testDebugUnitTest

      - name: Build Android APK
        working-directory: mobile
        run: ./gradlew assembleDebug

  # Schema validation (lightweight, no devenv needed)
  schema:
    name: Schema Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install -g @redocly/cli
          pip install openapi-generator-cli

      - name: Validate OpenAPI schema
        run: redocly lint schemas/openapi.yaml

  # Docker builds (separate from devenv)
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build verifier image
        uses: docker/build-push-action@v5
        with:
          context: ./services/verifier
          push: false
          tags: cachet/verifier:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build registry image
        uses: docker/build-push-action@v5
        with:
          context: ./services/registry
          push: false
          tags: cachet/registry:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build receipts-log image
        uses: docker/build-push-action@v5
        with:
          context: ./services/receipts-log
          push: false
          tags: cachet/receipts-log:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start services
        run: docker compose -f infra/docker-compose.yaml up -d --build

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8081/healthz; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:8082/healthz; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:8083/healthz; do sleep 2; done'

      - name: Run integration tests
        run: |
          curl -f http://localhost:8081/packs
          curl -f -X POST http://localhost:8081/presentations/verify \
            -H "Content-Type: application/json" \
            -d '{"policyId":"test","bundle":{}}'
          curl -f http://localhost:8082/policy/manifest

      - name: Stop services
        run: docker compose -f infra/docker-compose.yaml down