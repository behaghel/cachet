// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 2.5.0 DO NOT EDIT.
package models

import (
	"encoding/json"
	"fmt"
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for CredentialRequestFormat.
const (
	JwtVc   CredentialRequestFormat = "jwt_vc"
	LdpVc   CredentialRequestFormat = "ldp_vc"
	VcSdJwt CredentialRequestFormat = "vc+sd-jwt"
)

// Defines values for CredentialStatusType.
const (
	StatusList2021Entry CredentialStatusType = "StatusList2021Entry"
)

// Defines values for TokenRequestGrantType.
const (
	ClientCredentials TokenRequestGrantType = "client_credentials"
)

// Defines values for TokenResponseTokenType.
const (
	Bearer TokenResponseTokenType = "Bearer"
)

// Defines values for VeriffSessionDocumentType.
const (
	DriverLicense VeriffSessionDocumentType = "driver_license"
	NationalId    VeriffSessionDocumentType = "national_id"
	Passport      VeriffSessionDocumentType = "passport"
)

// Defines values for VeriffSessionStatus.
const (
	Abandoned VeriffSessionStatus = "abandoned"
	Approved  VeriffSessionStatus = "approved"
	Declined  VeriffSessionStatus = "declined"
	Expired   VeriffSessionStatus = "expired"
)

// CredentialRequest defines model for CredentialRequest.
type CredentialRequest struct {
	// Format Credential format
	Format CredentialRequestFormat `json:"format"`

	// Proof Cryptographic proof (optional)
	Proof *map[string]interface{} `json:"proof,omitempty"`

	// Types Credential types
	Types []string `json:"types"`
}

// CredentialRequestFormat Credential format
type CredentialRequestFormat string

// CredentialResponse defines model for CredentialResponse.
type CredentialResponse struct {
	Credential VerifiableCredential `json:"credential"`

	// Format Credential format used
	Format string `json:"format"`
}

// CredentialStatus defines model for CredentialStatus.
type CredentialStatus struct {
	// Id Status list entry URI
	Id string `json:"id"`

	// Type Status mechanism type
	Type CredentialStatusType `json:"type"`
}

// CredentialStatusType Status mechanism type
type CredentialStatusType string

// Error defines model for Error.
type Error struct {
	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error code
	Error string `json:"error"`

	// Message Human-readable error description
	Message string `json:"message"`
}

// TokenRequest defines model for TokenRequest.
type TokenRequest struct {
	// ClientId Client identifier
	ClientId string `json:"client_id"`

	// GrantType OAuth2 grant type
	GrantType TokenRequestGrantType `json:"grant_type"`

	// Scope Requested scope
	Scope string `json:"scope"`
}

// TokenRequestGrantType OAuth2 grant type
type TokenRequestGrantType string

// TokenResponse defines model for TokenResponse.
type TokenResponse struct {
	// AccessToken JWT access token
	AccessToken string `json:"access_token"`

	// ExpiresIn Token expiration time in seconds
	ExpiresIn int `json:"expires_in"`

	// Scope Granted scope
	Scope string `json:"scope"`

	// TokenType Token type
	TokenType TokenResponseTokenType `json:"token_type"`
}

// TokenResponseTokenType Token type
type TokenResponseTokenType string

// VeriffSession defines model for VeriffSession.
type VeriffSession struct {
	Document *struct {
		// Country ISO country code
		Country *string `json:"country,omitempty"`

		// Number Document number
		Number *string `json:"number,omitempty"`

		// Type Document type
		Type *VeriffSessionDocumentType `json:"type,omitempty"`
	} `json:"document,omitempty"`
	Person *struct {
		DateOfBirth *openapi_types.Date `json:"dateOfBirth,omitempty"`
		FirstName   *string             `json:"firstName,omitempty"`
		LastName    *string             `json:"lastName,omitempty"`
	} `json:"person,omitempty"`

	// SessionId Veriff session identifier
	SessionId string `json:"session_id"`

	// Status Verification status
	Status VeriffSessionStatus `json:"status"`
}

// VeriffSessionDocumentType Document type
type VeriffSessionDocumentType string

// VeriffSessionStatus Verification status
type VeriffSessionStatus string

// VerifiableCredential defines model for VerifiableCredential.
type VerifiableCredential struct {
	// Context JSON-LD context
	Context          []string          `json:"@context"`
	CredentialStatus *CredentialStatus `json:"credentialStatus,omitempty"`

	// CredentialSubject Claims about the subject
	CredentialSubject VerifiableCredential_CredentialSubject `json:"credentialSubject"`

	// ExpirationDate When the credential expires (optional)
	ExpirationDate *time.Time `json:"expirationDate"`

	// Id Unique credential identifier
	Id string `json:"id"`

	// IssuanceDate When the credential was issued
	IssuanceDate time.Time `json:"issuanceDate"`

	// Issuer Credential issuer DID
	Issuer string `json:"issuer"`

	// Type Credential types
	Type []string `json:"type"`
}

// VerifiableCredential_CredentialSubject Claims about the subject
type VerifiableCredential_CredentialSubject struct {
	// Id Subject DID
	Id string `json:"id"`

	// VerificationLevel Level of verification performed
	VerificationLevel *string `json:"verification_level,omitempty"`

	// VerificationMethod Verification method used
	VerificationMethod *string `json:"verification_method,omitempty"`

	// Verified Whether identity is verified
	Verified             *bool                  `json:"verified,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RequestCredentialJSONRequestBody defines body for RequestCredential for application/json ContentType.
type RequestCredentialJSONRequestBody = CredentialRequest

// RequestTokenJSONRequestBody defines body for RequestToken for application/json ContentType.
type RequestTokenJSONRequestBody = TokenRequest

// HandleVeriffWebhookJSONRequestBody defines body for HandleVeriffWebhook for application/json ContentType.
type HandleVeriffWebhookJSONRequestBody = VeriffSession

// Getter for additional properties for VerifiableCredential_CredentialSubject. Returns the specified
// element and whether it was found
func (a VerifiableCredential_CredentialSubject) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for VerifiableCredential_CredentialSubject
func (a *VerifiableCredential_CredentialSubject) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for VerifiableCredential_CredentialSubject to handle AdditionalProperties
func (a *VerifiableCredential_CredentialSubject) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if raw, found := object["verification_level"]; found {
		err = json.Unmarshal(raw, &a.VerificationLevel)
		if err != nil {
			return fmt.Errorf("error reading 'verification_level': %w", err)
		}
		delete(object, "verification_level")
	}

	if raw, found := object["verification_method"]; found {
		err = json.Unmarshal(raw, &a.VerificationMethod)
		if err != nil {
			return fmt.Errorf("error reading 'verification_method': %w", err)
		}
		delete(object, "verification_method")
	}

	if raw, found := object["verified"]; found {
		err = json.Unmarshal(raw, &a.Verified)
		if err != nil {
			return fmt.Errorf("error reading 'verified': %w", err)
		}
		delete(object, "verified")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for VerifiableCredential_CredentialSubject to handle AdditionalProperties
func (a VerifiableCredential_CredentialSubject) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["id"], err = json.Marshal(a.Id)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'id': %w", err)
	}

	if a.VerificationLevel != nil {
		object["verification_level"], err = json.Marshal(a.VerificationLevel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'verification_level': %w", err)
		}
	}

	if a.VerificationMethod != nil {
		object["verification_method"], err = json.Marshal(a.VerificationMethod)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'verification_method': %w", err)
		}
	}

	if a.Verified != nil {
		object["verified"], err = json.Marshal(a.Verified)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'verified': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
